# Generated by Django 4.2 on 2023-11-28 16:05

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formname', models.CharField(max_length=50)),
                ('effectivitydate', models.DateTimeField()),
                ('form_status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], max_length=8)),
                ('fields', models.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name='ScholarshipSponsor',
            fields=[
                ('sponsor_id', models.AutoField(primary_key=True, serialize=False)),
                ('sponsor_name', models.CharField(max_length=50)),
                ('contact_person', models.CharField(max_length=100)),
                ('contact_email', models.EmailField(max_length=50)),
                ('contact_number', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScholarshipProgram',
            fields=[
                ('scholarship_id', models.AutoField(primary_key=True, serialize=False)),
                ('scholarship_type', models.CharField(choices=[('Merit-Based', 'Merit-Based'), ('Need-Based', 'Need-Based'), ('STEM Scholarship', 'STEM Scholarship')], max_length=50)),
                ('scholarship_status', models.CharField(choices=[('Open', 'Open'), ('Closed', 'Closed'), ('Pending Approval', 'Pending Approval')], max_length=50)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=200)),
                ('eligibility', models.TextField()),
                ('application_deadline', models.DateField(null=True)),
                ('funding_amount', models.IntegerField(null=True)),
                ('sponsor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eskolar.scholarshipsponsor')),
            ],
        ),
        migrations.CreateModel(
            name='AdminUserRole',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('employee_id', models.IntegerField(null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('role', models.CharField(choices=[('admin', 'admin'), ('director', 'director'), ('head', 'head'), ('staff', 'staff')], default='staff', max_length=30)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('verification_token_created_at', models.DateTimeField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(related_name='admin_user_roles', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='admin_user_roles', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('role', models.CharField(default='student', max_length=30)),
                ('course', models.CharField(choices=[('BSIT', 'BSIT'), ('CEA', 'CEA'), ('CS', 'CS'), ('WK', 'WK')], default='BSIT', max_length=30)),
                ('year_level', models.CharField(choices=[('1st Year', '1st Year'), ('2nd Year', '2nd Year'), ('3rd Year', '3rd Year'), ('4th Year', '4th Year')], default='1st Year', max_length=30)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('status', models.CharField(default='Pending', max_length=30)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('verification_token_created_at', models.DateTimeField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(related_name='user_roles', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='user_roles', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
